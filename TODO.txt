save horizontal speeds separately!!!!!


// TODO Parse com_protocol for quake games in case they decide to override protocol despite demo name...


KINDA important: Unify EnhancePlayerStateWithBaseState and "enhanceOnly" to be consistent with each other.
Problem: Depending on the order in which we get playerstate/entitystate data, we either do the "enhanceonly" thing or we do the EnhancePlayerStateWithBaseState thing, and both lead to inconsistent results, so in cases where we quickly alternate between both methods (like with strobe), we end up with weird inconsistent behavior. Sad but true.
Basically, the order of the demos determines the outcome, which shouldn't be the case.
For example, enhanceonly didnt properly handle death/alive state and still doesnt handle crouch viewheight and such. Also it was intended to be used when only gaps are being filled but right now it could end up being used even with minute old playerstates. How to reconcile?


Make demo converter. Let it for example fix up names for jomme. Find closest color from the NT mod colors.

detect dbs on rolling ppl



way to have ET_GRAPPLE to have skins:
- use CS_CHARSKINS
- use new configstring to store merely "blue" or "red" to have more combinations and have a double key?
- include team for player so we can override skins
- what field to use? we can use tricketentindex 1 and 2. 16 bit each. uh. is 256*256 enough? 8 bits for skin, 8 bits for subskin index? then uh, maybe EF_REDTEAM or EF_BLUETEAM flag?
- or what about doing ET_PLAYER and have index pointing to this player's info in the unused configstrings above CS_MAX?


todo combiner: dismemberment entities? make sure to convert properly between dm_15 and dm_16! check demo15detected in jomme
todo combiner: convert nt name colors to hex?

find: dooms on heads of other ppl or other objects?


- not sure if done yet? find amount of SD in a cap run

IMPORTANT: handle bcs... (bcs0 bcs1 bcs3)


q3 defrag: 
stats[7]*65535 + stats[8](as uint16) = time roughly (actually multiply with 65536 and its correct)
stats[12] & 8 => run finished? or just end trigger hit?
stats[12] & 16 => alternates during run?
stats[12] & 4 and stats[12] & 2 => active during run? 2 seems to get deactivated one frame after stats[12] & 8 becomes true (run end) but 4 stays on. also 2 can get activated one frame later than 4. idk. but both are off before a run?
stats[12] & 512 => can be on? dunno what it means, was in the run with print at end
ps->stats[13] & 32 (PSF_USERINPUT_JUMP) might mean jump held? (isjumping) 
#define PSF_USERINPUT_NONE     0
#define PSF_USERINPUT_FORWARD  1
#define PSF_USERINPUT_BACKWARD 2
#define PSF_USERINPUT_LEFT     8
#define PSF_USERINPUT_RIGHT    16
#define PSF_USERINPUT_JUMP     32
#define PSF_USERINPUT_CROUCH   64
#define PSF_USERINPUT_ATTACK   256
#define PSF_USERINPUT_WALK     512
i guess we could say that if !(stats[12] & 2) and (stats[12] & 8) then run is over and time can get counted from stats[7] and stats[8]?
maybe 2 and 4 on stats means entering and exiting start/end triggers?

do some stats. client number average score



find stuff followed by markme within 5-10 seconds?


MARK MAX HEIGHT DIFFERENCE traveled during current swing. to find dfas from very high above for example, but also boosts from below maybe?
sth similar for overall distance traveled during special move?

detect hits that resulted in self kills? idk or at least stuff that results in a doom that wwasnt attributed?



what about the string extra stuff stripping hm. do i really need it? after all if the original demo had it ... why would i care?



count !markme and [DEMOMOMENT] as laughs? but also make an extra table for them. and maybe also parse the times in demo names?



nice regexp for killsprees mohaa: 
000_\d+[^T]*_U[45678]
000_[56789][^T]*_U[3456789]
000_[56789][^T]*(?:T[12])?_U[3456789]
[135]000_(?:[56789]|\d\d)[^T]*(?:T[12])?_U(?:[3456789]|\d\d)
obj[^\n"]+[13579]000_(?:[56789]|\d\d)[^T]*(?:T[12])?_U(?:[3456789]|\d\d)
obj[^\n"]+[13579]000_(?:[56789]|\d\d)[^T]*(?:T[12])?_U(?:[3456789]|\d\d)[^\r\n]*?\}"[\r\n]
[135]000_(?:[56789]|\d\d)[^T]*(?:T[12])?_U(?:[3456789]|\d\d)


if merging PS and ES, allow either snapping PS always, or do a special interpolation and only use the ES value to sanity check (we know it must be within +- 0.5 of the ES value, so use interpolated if it falls in that range, otherwise ES value)

remove spectator chat in reframes?


Important: Write lastGamestateChangeinDemoTime to database. So we can properly cut from GUI.

Todo: Laughs: Determine WHO laughed? Aka properly parse chat message. So we can tell if laugh came from someone nearby.

TODO: Track meta events for defrag runs but only around the finish?


when our lightsaberstyle guess is uncertain, fallback to ps if its reasonably recent?

fix mines not being properly persistent with -i -I (beams glitching, flickering)

combiner: copy over bmodel model entities (solid = SOLID_BMODEL or sth like that)

when merging: not only get most current position but also most current alive state!!!

DemoCutter: Put the last received "scores" command in at the start of the demo?



Bsp to minimap:make the strength of lines not moderated by zRange
Also try to detect sky via the surf_sky thing
make it recognize patches!



detect rets through mines? where mines were narrowly avoided?



get info from tinfo, EV_PAIN


detect special kind of kills like dfa with a swing animation or otherwise weird glitched/inconsistent animations?

FIX: I'm using teleport_bit wrong in a bunch of places.


maybe: dbs analysis. deviation from 180 angle
maybe: correlation of lag and ppl near u (find lagscript?)


maybe: detect boost chains? person boosts other person etc


save human readable game time into the db. 



moh ideas:
detect 360 trick shots? stuff like that with quick reaction time/aim? but we dont see map so tough.


competitive obj: detect 1 vs all kind of situation with victory.




q3 ideas:
duel: detect duel kills where u came back from a huge health/armor disadvantage to ur opponent
rockets: detect distance and jump height (ALSO FIX THE JUMP HEIGHT BTW, USE EV_JUMP)
rocket: travel duration


investigate what SNAPFLAG_RATE_DELAYED does



tayst: Player speed at grab and / or at cap?



reframe: movementkeys?


make laughs a meta event?

lost packet count (global count for demo?)
top10 inferred (top10i)
automatically save invalid delta frame thingie
better prediction for laggy demos with gravity?
detect changes of who is spectated! (and if so add teleport flag) EF_TELEPORT_BIT
Clean up older SnapshotInfos (that are just too old to be useful, like 30+ sec?) to save RAM on long demos.
Make demos identifiable so I can avoid re-cutting them
should we properly map event entities too?
Remember or even interpolate Health/Armor when getting info from entity state? Maybe even ... infer health and such from hit info?

weapon select wheel when switching between entity and playerstate
I think this is reason for weapon select issue maybe:
if ( ps->persistant[PERS_SPAWN_COUNT] != ops->persistant[PERS_SPAWN_COUNT] ) {
		CG_Respawn();
	}

MAYBE: detect unintentional kills? where killer wasnt looking at victim? kinda pointless tho due to bs/dbs
some way to filter out afk kills and weirdo shit in ffa
track highest place anyone's ever been!
detect allahu akhbar
detect mutual kills (kills each other on same frame)
TODO: For democombiner: regarding reuse of entities for events. also make sure to update the blockedEntities array whenever a slot gets freed. Don't reuse the slot earlier. Also: Don't reserve a slot if it is currently blocked.
Also make sure that when reusing entity or player slots, event bits and such are handled properly? 
use tinfo for health/armor if available.
copy door entities. but only copy them from one demo otherwise its chaos. some way to control it...
record speed at exact time of death (bc some attacks like ydfa stop u dead in tracks and the number ends up misleading)
add option to extrapolate/predict using only gravity&velocity when demobot has cut away from kill. wont detect ground ofc, but could at least allow to salvage the scene.
find highest amount of mines at same time
MAYBE current stance of victim? not important tho.
captureS: save kills/rets during run. overall fastest speed during run. kills in last 5 seconds. PARTIALLY DONE


how i can actually do slowmotion maybe: commandtime slowing! like with lag!

detect BC kills? 


- Get HEALTH from: teaminfo and ESP: plaerstate shenanigans and EV_PAIN tracking etc

what doess saberattackchaincount do?



ctf autospectatorcam?



democutter can mess up capture count/game time. idk why. even after pauses where it would be ordinarily reset. strange.




for everything: save highest amount of consecutive lost packets?
some more info about mine kills? to recognize cool ones?
For g2 ents, maybe dont copy events?
Do KG2 for g2animents when demo ends. KINDA DONE BUT DOESNT REALLY WORK
What about dead bodies of ET_GRAPPLE?
log highest count of sentries/mines ever

Make the G2 entity part optional. Aka. If there is still a free player spot, put the player in normal. Otherwise force him into g2. But how to predict that? How to make sure the next demo that loads won't then be missing player spots? I guess we start deleting the potential g2 ones if that happens. "moving them over" if you will?
Likewise, if a player absolutely cannot fit in, make him a g2ent and throw a warning.
track percentage visible as capper?
save player counts for sprees
allow killing sprees that simply count without time by the amount of kills without dying. might be a bit lame tho.
track airtime before kill/cap?
TODO: DON'T use GetCurrentEntities in DemoDefragCombiner. In fact probably make that stuff private. Interpolation/seekahead could interfere with it. Also don't let it use the normal EndReached(). Its working through sheer luck atm.
for combiner, try median of local lows instead of global low?

fix yet another error with event not being copied in democombiner - that dadler kill between red pillars, flag return.
uhm ... shots from turrets? copy over
use std::lower_Bound and similar to speed up search through vectors/maps

game finding:
start with: just hashing final scoreboards (to dedupe) and recording final scores
help: "hit the capturelimit" phrase and "Intermission" PMT. Pauses are "SinglePlayerIntermission"
log players (including disconnected/renamed/reconnected ones)
log final score and each player's score details
try to resume score data of a player if he reconnects (unless impossible)
try to guess each player's position in the game in perhaps 1-minute blocks. probably too complex but eh.
try to hash each game in some way so that duplicates are found.
log times during which each player played (in both millisecond and second precision) and total play time of each player and for each section of playing, the score of that player
log pauses, their times and durations and total pause duration
log a number of total player changes during a game.
TODO: use EV_PAIN to get health for entitystate->playerstate.

detect: dbs against ssomeone who's crouching or in roll

todo: add conversion to/from MBII so ppl can do campathss in jamme. Then make a "campath baker"  tool that can bake a jamme path into a demo.

Demostats: Find demos with dismemberment.

TODO: Use saberattackchaincount for something? What about saberBlocked? FallingToDeath?

merger: fix events. add persistance to all objects (for strobe demos mostly). add optional smoothing/interpolation with 3 modes: serverTime, commandTime hybrid, commandTime absolute.

fix wrong A2A detections. example: my dbs on andon

Maybe get a stacktrace for SEH exceptions. But don't wanna include 20000000 GB of Boost code just to get the stacktrace.

idea: better interpolation using gravity and velocity. maybe even with jump in between? hmm. but 2 jumps would be 2 much. Or even use AI to do interpolation?

detect: keypress burst speeds.
detect: comebacks.
detect: games.


TODO: make saber shenanigans 2.0 work: https://github.com/Boothand/jk2mp/commit/613157c3160009482fa00c3d4f668c080423a796


integrate: https://github.com/videoP/Demo2Trail
integrate: https://github.com/TheSil/JkaDemoTools

TODO: JKA Integration: CS_PLAYERS etc, and, anim/event remappings checkup.

TODO: JKA zlib compression of that heightmap stuff

Figure out: 
Protocol 71,
83,84: Enemy territory?


Demo compressor: make it use fast huffman writing.

Demo Compressor: Add Reed Solomon correction.
Use https://github.com/quiet/libcorrect ?

IMPORTANT: Don't do dm15detected!!!
get from jk2mv: demoCheckFor103


Important DemoReframer:
PS can have 2 events. if so, make second an event entity.... but how to do it cleanly?

Boosts:
Maybe ignore boosts for anything but saber kills? What's the point really? Also maybe don't consider boosts that happen on the exact same frame or you end up with mine kills automatically becoming boost kills? But it's hard to tell bc of snaps limit.
Or: Only count mine boost kills if the killing mine was fired after the boost.
Also maybe ignore boosts that are super slow and/or if they don't raise the speed above anything that you could achieve by just walking.
horizontal and vertical separate
Make travelled distance check in direction of boost?

if player not visible or dead: immediate cancellation of boosts

detect airborne mine kills as separate. also timed mines vs planted ones.
detect teamkills


- lots of SDs/ssaberblocks/hits 
- for these jumps... add a bit of timeout. so even if u quickly land somewhere it still counts
- do boost detection for caps too - and maybe some other stuff?
- saberonly gamemode detection: do stats about common weapondisable and forcedisable modes.
- offer to put some tables/stats in extra .db file
- option to stop detecting dooms and or restrict them when variouus force powwers are active (aka dont detect saber doom if player was nowhere near other player as its likely a force puill or sth).
- make killspree parameter accept number to say how many kills must be saber kills to accept it


- killsprees resulting caps: see for non-after caps, how many of the kills were before the cap?

DemoReframer:
- What about player state / player entity events? How to handle those? 

DemoMerger:
- Show scoreboard/Intermission (when reframing?)
- Crouch discrepancy?
- also reframer: Show scoreboard when dead? with merger it can jump between showing and not showing actually
- Weird ZEROEVENT aand other duplicated events still



check for @@@PLRENAME to track who is who and build a chain that allows to more easily identify players


DONE: 

For killAngles: specifically note whether the kill is from a pre-processed demo, to make it easier for the GUI to immediately see that this info is usable? (since in the past it would be based on serverName and there are ugly workarounds for that there)
Actually, just do a new table called demoDatabaseMeta which contains info about various stuff, for example whether the serverName is in fact in the killAngles table
fix the negative demo time demos..
Make a table with demo meta data. Like the filesize, datetime and total length. Use that then to avoid working with cuts of a demo as the main source in GUI
recentFlagHoldTimes[lastKnownRedFlagCarrier] = demoCurrentTime - cgs.redFlagLastChangeToTaken; // Hmm but this creates a wrong value on the first frame of holding the flag. If it's a one-frame capture we will end up with a wrong time duration held ...
count laughs following kills/caps/rets
sneaky detection: detect long periods of crouch and rets that follow within 2 seconds after them
TODO: Killsprees: dont count teamkills (or mark them specially). And mark somehow the number of unique clientnums in the killsprees
TODO: Kills: mark Teamkills as such. Maybe comment them out by default.
detect & remember last boost & speed gain
detect mine boosts/backflip before kills? ( done as well as i can i think , tho no specific mine boost detect )
check: leads to capture? can do that now
also: get longer-span killstreaks with spans longer than 3s, but mark them as such. or rather: maybe make separate detections or sth? 3,5,7,9 seconds span. hmm. or: 3 second main but allow a bit in between?
MAYBE detect captures and also swoops (captures with very short hold time). could also try and detect how long it took to capture etc. find fastest capures (KINDA done or at least can be inferred from data)
detect amount of people surrounding the kill in past 5 seconds (for nice scenes with lots of ppl)
track kills where killer jumped over someone else's head. and how many heads? or just. track headjumps before the kill.
Dont keep old stuff, it makes stuff slow the bigger the files are. clear the maps regularly, e.g. kills and speeds
Maybe always remember last known full playerstate and copy some stuff from it...
Do a demo merger. combines multiple demos of same game...
solve CROUCH when info comes from entities.
Obituary event makes zero sense atm... lol. Just using original clientnums that make no sense in the new demo- done ig?
look at BG_EvaluateTrajectory for non player entity trajectories- done ig?
and BG_PlayerStateToEntityStateExtraPolate and CG_AddToHistory for player entity trajectories - done ig?
- bc leading to cap ( kinda, not specifically bc but kill/ret/killspree )
lost packet count (kinda in the packet stats)
keep date modified
dbs speed
- BC/Ret that leads to captures... (kinda, not BC just kills/killsprees)
- make optional ultralong (18 second) killspree detection for fetchd DONE
- jumps over people's heads DONE
- clutch save DONE
- through wall DONE
include cleaned up name in name parts
laugh detector: find moments with lots of laughter. or laughter sprees. where multiple people laugh a lot. or ppl say "rofl" etc in general. to find funny moments.
For trimmed cuts, include offset
close/very close enemies throughout cap. very close (within hitting distance?). or make it a number of "danger ratio" or sth idk
captures: whether it was picked up from base or from taken (bc that matters in terms of flaghold time)
For rets, save whether flag carrier was visible throughout his hold time.
Let the light demo analyzer check whether a player is ever present in the demo. If not, dont even copy as G2 ent.
attacker is flag carrier? Also for killsprees? Or nah
Also put defrag runs into database. And make them their own file. And maybe make thirdpersons their own file.
Save current speed too.
MAYBE do something about the command time-normal time delay issue? Idk what. Fixed offset? Determine from ping one time and then apply fixed value?
save whether the flag carrier was blue or red. relevant bc locations and directions
also save whether other flag was taken or on pad
maybe save current score too?
also save how long the flag hold time was at time of ret
attacker and victim teams.
IMPORTANT save kills where victim is followed!
also save whether victim was followed and make also variable "victimvisibleorfollowed"
record speed at when dbs (or other kind of attack) was initiated.
detect speed at which dbs was triggered (first frame of dbs)
in killsprees, show MODs and also main MOD (one with most kills) and also show distance between each kill
TODO: Make it overwrite kills in the database if the ones in database are third person and the new one is first person DONE (via split angles and kills)
TODO: Have it separate kill and angle. Makes more sense. To know what a demo exists of. Otherwise its just the first one that happens to be analyzed in the database. DONE
Maybe write server name/subtext and playermodels into thing as well. Thing I mean... database. DONE
add timestamp to killstreaks too DONE
save duration for killstreaks DONE
solve terminated by signal 11 on some demos HOPEFULLY SOLVED?
detect teleport KINDA DONE
demoCurrentTime happens after parsesnapshot but we add commands in parsesnapshot? FALSE ALARM I THINK, REMEMBERED WRONG
EV_PLAYER_TELEPORT_IN DONE
EV_PLAYER_TELEPORT_OUT DONE
sv_hostname in 0 and configstring 4 DONE
for combiner, try average and median of local averages.