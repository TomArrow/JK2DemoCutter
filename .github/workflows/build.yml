name: Build

on:
  workflow_dispatch:
  push:
    branches: master
  pull_request:
    branches: master
  release:
    types: [created]

jobs:

  vs2022:
    name: Build VS 2022 (Portable), ${{ matrix.build_type }}, ${{ matrix.arch }}
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        arch: [Win32, x64]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    #- name: Create Build Environment
     # run: cmake -E make_directory ${{github.workspace}}/build/actions

    #- name: Configure CMake
    #  shell: bash
   #   working-directory: ${{github.workspace}}/build/actions
   #   run: cmake $GITHUB_WORKSPACE -A ${{ matrix.arch }} -DBuildPortableVersion=ON

    - name: Get Win 8.1 SDK
      run: |
        import subprocess
        import urllib.request
        urllib.request.urlretrieve("https://go.microsoft.com/fwlink/p/?LinkId=323507", "sdksetup.exe")
        subprocess.run(["sdksetup.exe", "/q", "/norestart", "/features", "OptionId.WindowsDesktopSoftwareDevelopmentKit", "OptionId.NetFxSoftwareDevelopmentKit"], check=True, capture_output=True)
      shell: python

    - name: Build
      working-directory: ${{github.workspace}}
      shell: cmd
      run: msbuild /m /p:Configuration=${{ matrix.build_type }} DemoCutter/DemoCutter.vcxproj

    #- uses: 'actions/upload-artifact@v4'
    #  with:
    #    name: Windows Binaries (Portable), ${{ matrix.build_type }}, ${{ matrix.arch }}
    #    path: ${{github.workspace}}/build/actions/out/${{ matrix.build_type }}/*

    - uses: 'actions/upload-artifact@v4'
      if: ${{ matrix.build_type == 'RelWithDebInfo' }}
      with:
        name: Windows Package (Portable), ${{ matrix.build_type }}, ${{ matrix.arch }}
        path: ${{github.workspace}}/build/actions/out/*.zip

    # As actions/upload-release-asset seems to demand exact filenames and content types we use a script instead
    - name: Upload Release
      if: ${{ github.event_name == 'release' && matrix.build_type == 'RelWithDebInfo' }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          for ( let filename of await fs.readdir(String.raw`${{github.workspace}}/build/actions/out/`) )
          {
            if ( filename.endsWith('.zip') )
            {
              await github.rest.repos.uploadReleaseAsset(
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ github.event.release.id }},
                  name: filename,
                  data: await fs.readFile( String.raw`${{github.workspace}}/build/actions/out/` + filename )
                }
              );
            }
          }

  vs2019_xp:
    name: Build VS 2019 (Portable - WinXP), ${{ matrix.build_type }}, ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        arch: [Win32]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install WinXP Toolset
      shell: powershell
      run: |
        Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
        Start-Process -FilePath vs_installer.exe -ArgumentList "modify", "--installPath", "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise", "--add Microsoft.VisualStudio.Component.WinXP", "--quiet", "--norestart", "--nocache" -Wait -PassThru -WindowStyle Hidden

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    #- name: Create Build Environment
    #  run: cmake -E make_directory ${{github.workspace}}/build/actions

    #- name: Configure CMake
    #  shell: bash
    #  working-directory: ${{github.workspace}}/build/actions
   #   run: cmake $GITHUB_WORKSPACE -A ${{ matrix.arch }} -T v141_xp -DBuildPortableVersion=ON -DWITH_MARIADB=OFF -DWITH_BCRYPT=OFF

    - name: Build
      working-directory: ${{github.workspace}}/build/actions
      shell: cmd
      run: msbuild /m /p:Configuration=${{ matrix.build_type }} DemoCutter/DemoCutter.vcxproj

    #- uses: 'actions/upload-artifact@v4'
    #  with:
    #    name: Windows Binaries (Portable - WinXP), ${{ matrix.build_type }}, ${{ matrix.arch }}
    #    path: ${{github.workspace}}/build/actions/out/${{ matrix.build_type }}/*

    - uses: 'actions/upload-artifact@v4'
      if: ${{ matrix.build_type == 'RelWithDebInfo' }}
      with:
        name: Windows Package (Portable - WinXP), ${{ matrix.build_type }}, ${{ matrix.arch }}
        path: ${{github.workspace}}/build/actions/out/*.zip

    # As actions/upload-release-asset seems to demand exact filenames and content types we use a script instead
    - name: Upload Release
      if: ${{ github.event_name == 'release' && matrix.build_type == 'RelWithDebInfo' }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          for ( let filename of await fs.readdir(String.raw`${{github.workspace}}/build/actions/out/`) )
          {
            if ( filename.endsWith('.zip') )
            {
              await github.rest.repos.uploadReleaseAsset(
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ github.event.release.id }},
                  name: filename.split('.').slice(0, -1).join('.') + "-winxp.zip",
                  data: await fs.readFile( String.raw`${{github.workspace}}/build/actions/out/` + filename )
                }
              );
            }
          }



  create-latest:
    if: github.event_name == 'push' && github.ref == 'refs/heads/everything'
    needs: [vs2022,vs2019_xp]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
            path: ./artifacts

      - name: Create binary archives
        run: |
            ls -l
            find ./artifacts -type d -mindepth 1 -maxdepth 1 -exec 7z a -r "{}.zip" "{}/*" \;

      - name: Create latest build
        uses: TomArrow/GH-Automatic-Releases@v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: false
          title: Latest Build
          files: |
            artifacts/*.zip
            