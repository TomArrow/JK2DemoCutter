// This is some stuff for my idea of also allowing other game demos as source for generating DM15/DM16 demos.
// Very early stage tho really, just a bit of an idea atm, not a serious effort.


// Most if not all credit for quake live related info goes to the 
// contributors of wolfcamql who seem to have figured out quite a bit of the event numbers etc.

#ifndef __OTHERGAMESTUFF_H__
#define __OTHERGAMESTUFF_H__

#include "anims.h"
#include "demoCut.h"

#define MISSIONPACK

#define	ANIM_TOGGLEBIT_Q3		128
#define	ANIM_TOGGLEBIT_QL		128


#define	MAX_CLIENTS_Q3			64		// absolute limit
#define	MAX_CLIENTS_QL			64		// absolute limit
#define MAX_LOCATIONS_Q3		64
#define	MAX_MODELS_Q3			256		// these are sent over the net as 8 bits
#define	MAX_SOUNDS_Q3			256		// so they cannot be blindly increased

#define	CS_MUSIC_Q3				2
#define	CS_MESSAGE_Q3				3		// from the map worldspawn's message field
#define	CS_MOTD_Q3					4		// g_motd string for server message of the day
#define	CS_WARMUP_Q3				5		// server time when the match will be restarted
#define	CS_SCORES1_Q3				6
#define	CS_SCORES2_Q3				7
#define CS_VOTE_TIME_Q3			8
#define CS_VOTE_STRING_Q3			9
#define	CS_VOTE_YES_Q3				10
#define	CS_VOTE_NO_Q3				11

#define CS_TEAMVOTE_TIME_Q3		12
#define CS_TEAMVOTE_STRING_Q3		14
#define	CS_TEAMVOTE_YES_Q3			16
#define	CS_TEAMVOTE_NO_Q3			18

#define	CS_GAME_VERSION_Q3			20
#define	CS_LEVEL_START_TIME_Q3		21		// so the timer only shows the current level
#define	CS_INTERMISSION_Q3			22		// when 1, fraglimit/timelimit has been hit and intermission will start in a second or two
#define CS_FLAGSTATUS_Q3			23		// string indicating flag status in CTF
#define CS_SHADERSTATE_Q3			24
#define CS_BOTINFO_Q3				25

#define	CS_ITEMS_Q3				27		// string of 0's and 1's that tell which items are present

#define	CS_MODELS_Q3				32
#define	CS_SOUNDS_Q3				(CS_MODELS_Q3+MAX_MODELS_Q3)
#define	CS_PLAYERS_Q3				(CS_SOUNDS_Q3+MAX_SOUNDS_Q3)
#define CS_LOCATIONS_Q3				(CS_PLAYERS_Q3+MAX_CLIENTS_Q3)
#define CS_PARTICLES_Q3				(CS_LOCATIONS_Q3+MAX_LOCATIONS_Q3) 

#define CS_MAX_Q3					(CS_PARTICLES_Q3+MAX_LOCATIONS_Q3)


#define	MAX_CONFIGSTRINGS_Q3	1024


#define	EF_DEAD_Q3				0x00000001		// don't draw a foe marker over players with EF_DEAD
#define EF_TICKING_Q3			0x00000002		// used to make players play the prox mine ticking sound
#define	EF_TELEPORT_BIT_Q3		0x00000004		// toggled every time the origin abruptly changes
#define	EF_AWARD_EXCELLENT_Q3	0x00000008		// draw an excellent sprite
#define EF_PLAYER_EVENT_Q3		0x00000010
#define	EF_BOUNCE_Q3			0x00000010		// for missiles
#define	EF_BOUNCE_HALF_Q3		0x00000020		// for missiles
#define	EF_AWARD_GAUNTLET_Q3	0x00000040		// draw a gauntlet sprite
#define	EF_NODRAW_Q3			0x00000080		// may have an event, but no model (unspawned items)
#define	EF_FIRING_Q3			0x00000100		// for lightning gun
#define	EF_KAMIKAZE_Q3			0x00000200
#define	EF_MOVER_STOP_Q3		0x00000400		// will push otherwise
#define EF_AWARD_CAP_Q3			0x00000800		// draw the capture sprite
#define	EF_TALK_Q3				0x00001000		// draw a talk balloon
#define	EF_CONNECTION_Q3		0x00002000		// draw a connection trouble sprite
#define	EF_VOTED_Q3				0x00004000		// already cast a vote
#define	EF_AWARD_IMPRESSIVE_Q3	0x00008000		// draw an impressive sprite
#define	EF_AWARD_DEFEND_Q3		0x00010000		// draw a defend sprite
#define	EF_AWARD_ASSIST_Q3		0x00020000		// draw a assist sprite
#define EF_AWARD_DENIED_Q3		0x00040000		// denied
#define EF_TEAMVOTED_Q3			0x00080000		// already cast a team vote



// Quake Live, based on wolfcamql
#define CS_MUSIC_QL				2
#define	CS_MESSAGE_QL				3		// from the map worldspawn's message field
#define	CS_MOTD_QL					4		// g_motd string for server message of the day
#define	CS_WARMUP_QL				5		// server time when the match will be restarted
#define	CS_SCORES1_QL				6
#define	CS_SCORES2_QL				7
#define CS_VOTE_TIME_QL			8
#define CS_VOTE_STRING_QL			9
#define	CS_VOTE_YES_QL				10
#define	CS_VOTE_NO_QL				11
//#define CS_TEAMVOTE_TIME		12  //FIXME don't know
#define	CS_GAME_VERSION_QL			12
#define	CS_LEVEL_START_TIME_QL		13		// so the timer only shows the current level
#define	CS_INTERMISSION_QL			14		// when 1, fraglimit/timelimit has been hit and intermission will start in a second or two
#define	CS_ITEMS_QL				15		// string of 0's and 1's that tell which items are present
#define CS_MODELS_QL 				17  // was 32.  Same shit as CS_SOUNDS where it is being indexed from 1 so 17 is empty and first model is 18
#define	CS_SOUNDS_QL				274  //(CS_MODELS+MAX_MODELS).  Might be 273 (17 + 256), but using consistant indexing from 0 in source code to fix sound bugs
#define	CS_PLAYERS_QL				529  //(CS_SOUNDS+MAX_SOUNDS)
#define CS_LOCATIONS_QL			593  //(CS_PLAYERS+MAX_CLIENTS)
#define	MAX_CONFIGSTRINGS_QL	1024



static const int q3ItemListToGeneral[] = {
	ITEMLIST_NONE_GENERAL,
	ITEMLIST_ITEM_ARMOR_SHARD_GENERAL,
	ITEMLIST_ITEM_ARMOR_COMBAT_GENERAL,
	ITEMLIST_ITEM_ARMOR_BODY_GENERAL,
	ITEMLIST_ITEM_HEALTH_SMALL_GENERAL,
	ITEMLIST_ITEM_HEALTH_GENERAL,
	ITEMLIST_ITEM_HEALTH_LARGE_GENERAL,
	ITEMLIST_ITEM_HEALTH_MEGA_GENERAL,
	ITEMLIST_WEAPON_GAUNTLET_GENERAL,
	ITEMLIST_WEAPON_SHOTGUN_GENERAL,
	ITEMLIST_WEAPON_MACHINEGUN_GENERAL,
	ITEMLIST_WEAPON_GRENADELAUNCHER_GENERAL,
	ITEMLIST_WEAPON_ROCKETLAUNCHER_GENERAL,
	ITEMLIST_WEAPON_LIGHTNING_GENERAL,
	ITEMLIST_WEAPON_RAILGUN_GENERAL,
	ITEMLIST_WEAPON_PLASMAGUN_GENERAL,
	ITEMLIST_WEAPON_BFG_GENERAL,
	ITEMLIST_WEAPON_GRAPPLINGHOOK_GENERAL,
	ITEMLIST_AMMO_SHELLS_GENERAL,
	ITEMLIST_AMMO_BULLETS_GENERAL,
	ITEMLIST_AMMO_GRENADES_GENERAL,
	ITEMLIST_AMMO_CELLS_GENERAL,
	ITEMLIST_AMMO_LIGHTNING_GENERAL,
	ITEMLIST_AMMO_ROCKETS_GENERAL,
	ITEMLIST_AMMO_SLUGS_GENERAL,
	ITEMLIST_AMMO_BFG_GENERAL,
	ITEMLIST_HOLDABLE_TELEPORTER_GENERAL,
	ITEMLIST_HOLDABLE_MEDKIT_GENERAL,
	ITEMLIST_ITEM_QUAD_GENERAL,
	ITEMLIST_ITEM_ENVIRO_GENERAL,
	ITEMLIST_ITEM_HASTE_GENERAL,
	ITEMLIST_ITEM_INVIS_GENERAL,
	ITEMLIST_ITEM_REGEN_GENERAL,
	ITEMLIST_ITEM_FLIGHT_GENERAL,
	ITEMLIST_TEAM_CTF_REDFLAG_GENERAL,
	ITEMLIST_TEAM_CTF_BLUEFLAG_GENERAL,
	ITEMLIST_HOLDABLE_KAMIKAZE_GENERAL,
	ITEMLIST_HOLDABLE_PORTAL_GENERAL,
	ITEMLIST_HOLDABLE_INVULNERABILITY_GENERAL,
	ITEMLIST_AMMO_NAILS_GENERAL,
	ITEMLIST_AMMO_MINES_GENERAL,
	ITEMLIST_AMMO_BELT_GENERAL,
	ITEMLIST_ITEM_SCOUT_GENERAL,
	ITEMLIST_ITEM_GUARD_GENERAL,
	ITEMLIST_ITEM_DOUBLER_GENERAL,
	ITEMLIST_ITEM_AMMOREGEN_GENERAL,
	ITEMLIST_TEAM_CTF_NEUTRALFLAG_GENERAL,
	ITEMLIST_ITEM_REDCUBE_GENERAL,
	ITEMLIST_ITEM_BLUECUBE_GENERAL,
	ITEMLIST_WEAPON_NAILGUN_GENERAL,
	ITEMLIST_WEAPON_PROX_LAUNCHER_GENERAL,
	ITEMLIST_WEAPON_CHAINGUN_GENERAL,
	ITEMLIST_NUM_TOTAL_GENERAL,
};

static const int qldm73ItemListToGeneral[] = { // based on wolfcamql
	ITEMLIST_NONE_GENERAL,
	ITEMLIST_ITEM_ARMOR_SHARD_GENERAL,
	ITEMLIST_ITEM_ARMOR_COMBAT_GENERAL,
	ITEMLIST_ITEM_ARMOR_BODY_GENERAL,
	ITEMLIST_ITEM_ARMOR_JACKET_GENERAL,
	ITEMLIST_ITEM_HEALTH_SMALL_GENERAL,
	ITEMLIST_ITEM_HEALTH_GENERAL,
	ITEMLIST_ITEM_HEALTH_LARGE_GENERAL,
	ITEMLIST_ITEM_HEALTH_MEGA_GENERAL,
	ITEMLIST_WEAPON_GAUNTLET_GENERAL,
	ITEMLIST_WEAPON_SHOTGUN_GENERAL,
	ITEMLIST_WEAPON_MACHINEGUN_GENERAL,
	ITEMLIST_WEAPON_GRENADELAUNCHER_GENERAL,
	ITEMLIST_WEAPON_ROCKETLAUNCHER_GENERAL,
	ITEMLIST_WEAPON_LIGHTNING_GENERAL,
	ITEMLIST_WEAPON_RAILGUN_GENERAL,
	ITEMLIST_WEAPON_PLASMAGUN_GENERAL,
	ITEMLIST_WEAPON_BFG_GENERAL,
	ITEMLIST_WEAPON_GRAPPLINGHOOK_GENERAL,
	ITEMLIST_AMMO_SHELLS_GENERAL,
	ITEMLIST_AMMO_BULLETS_GENERAL,
	ITEMLIST_AMMO_GRENADES_GENERAL,
	ITEMLIST_AMMO_CELLS_GENERAL,
	ITEMLIST_AMMO_LIGHTNING_GENERAL,
	ITEMLIST_AMMO_ROCKETS_GENERAL,
	ITEMLIST_AMMO_SLUGS_GENERAL,
	ITEMLIST_AMMO_BFG_GENERAL,
	ITEMLIST_HOLDABLE_TELEPORTER_GENERAL,
	ITEMLIST_HOLDABLE_MEDKIT_GENERAL,
	ITEMLIST_ITEM_QUAD_GENERAL,
	ITEMLIST_ITEM_ENVIRO_GENERAL,
	ITEMLIST_ITEM_HASTE_GENERAL,
	ITEMLIST_ITEM_INVIS_GENERAL,
	ITEMLIST_ITEM_REGEN_GENERAL,
	ITEMLIST_ITEM_FLIGHT_GENERAL,
	ITEMLIST_TEAM_CTF_REDFLAG_GENERAL,
	ITEMLIST_TEAM_CTF_BLUEFLAG_GENERAL,
	ITEMLIST_HOLDABLE_KAMIKAZE_GENERAL,
	ITEMLIST_HOLDABLE_PORTAL_GENERAL,
	ITEMLIST_HOLDABLE_INVULNERABILITY_GENERAL,
	ITEMLIST_AMMO_NAILS_GENERAL,
	ITEMLIST_AMMO_MINES_GENERAL,
	ITEMLIST_AMMO_BELT_GENERAL,
	ITEMLIST_ITEM_SCOUT_GENERAL,
	ITEMLIST_ITEM_GUARD_GENERAL,
	ITEMLIST_ITEM_DOUBLER_GENERAL,
	ITEMLIST_ITEM_ARMORREGEN_GENERAL,
	ITEMLIST_TEAM_CTF_NEUTRALFLAG_GENERAL,
	ITEMLIST_ITEM_REDCUBE_GENERAL,
	ITEMLIST_ITEM_BLUECUBE_GENERAL,
	ITEMLIST_WEAPON_NAILGUN_GENERAL,
	ITEMLIST_WEAPON_PROX_LAUNCHER_GENERAL,
	ITEMLIST_WEAPON_CHAINGUN_GENERAL,
	ITEMLIST_NUM_TOTAL_GENERAL
};

static const int qldm90ItemListToGeneral[] = { // based on wolfcamql
	ITEMLIST_NONE_GENERAL,
	ITEMLIST_ITEM_ARMOR_SHARD_GENERAL,
	ITEMLIST_ITEM_ARMOR_COMBAT_GENERAL,
	ITEMLIST_ITEM_ARMOR_BODY_GENERAL,
	ITEMLIST_ITEM_ARMOR_JACKET_GENERAL,
	ITEMLIST_ITEM_HEALTH_SMALL_GENERAL,
	ITEMLIST_ITEM_HEALTH_GENERAL,
	ITEMLIST_ITEM_HEALTH_LARGE_GENERAL,
	ITEMLIST_ITEM_HEALTH_MEGA_GENERAL,
	ITEMLIST_WEAPON_GAUNTLET_GENERAL,
	ITEMLIST_WEAPON_SHOTGUN_GENERAL,
	ITEMLIST_WEAPON_MACHINEGUN_GENERAL,
	ITEMLIST_WEAPON_GRENADELAUNCHER_GENERAL,
	ITEMLIST_WEAPON_ROCKETLAUNCHER_GENERAL,
	ITEMLIST_WEAPON_LIGHTNING_GENERAL,
	ITEMLIST_WEAPON_RAILGUN_GENERAL,
	ITEMLIST_WEAPON_PLASMAGUN_GENERAL,
	ITEMLIST_WEAPON_BFG_GENERAL,
	ITEMLIST_WEAPON_GRAPPLINGHOOK_GENERAL,
	ITEMLIST_AMMO_SHELLS_GENERAL,
	ITEMLIST_AMMO_BULLETS_GENERAL,
	ITEMLIST_AMMO_GRENADES_GENERAL,
	ITEMLIST_AMMO_CELLS_GENERAL,
	ITEMLIST_AMMO_LIGHTNING_GENERAL,
	ITEMLIST_AMMO_ROCKETS_GENERAL,
	ITEMLIST_AMMO_SLUGS_GENERAL,
	ITEMLIST_AMMO_BFG_GENERAL,
	ITEMLIST_HOLDABLE_TELEPORTER_GENERAL,
	ITEMLIST_HOLDABLE_MEDKIT_GENERAL,
	ITEMLIST_ITEM_QUAD_GENERAL,
	ITEMLIST_ITEM_ENVIRO_GENERAL,
	ITEMLIST_ITEM_HASTE_GENERAL,
	ITEMLIST_ITEM_INVIS_GENERAL,
	ITEMLIST_ITEM_REGEN_GENERAL,
	ITEMLIST_ITEM_FLIGHT_GENERAL,
	ITEMLIST_TEAM_CTF_REDFLAG_GENERAL,
	ITEMLIST_TEAM_CTF_BLUEFLAG_GENERAL,
	ITEMLIST_HOLDABLE_KAMIKAZE_GENERAL,
	ITEMLIST_HOLDABLE_PORTAL_GENERAL,
	ITEMLIST_HOLDABLE_INVULNERABILITY_GENERAL,
	ITEMLIST_AMMO_NAILS_GENERAL,
	ITEMLIST_AMMO_MINES_GENERAL,
	ITEMLIST_AMMO_BELT_GENERAL,
	ITEMLIST_ITEM_SCOUT_GENERAL,
	ITEMLIST_ITEM_GUARD_GENERAL,
	ITEMLIST_ITEM_DOUBLER_GENERAL,
	ITEMLIST_ITEM_ARMORREGEN_GENERAL,
	ITEMLIST_TEAM_CTF_NEUTRALFLAG_GENERAL,
	ITEMLIST_ITEM_REDCUBE_GENERAL,
	ITEMLIST_ITEM_BLUECUBE_GENERAL,
	ITEMLIST_WEAPON_NAILGUN_GENERAL,
	ITEMLIST_WEAPON_PROX_LAUNCHER_GENERAL,
	ITEMLIST_WEAPON_CHAINGUN_GENERAL,
	ITEMLIST_ITEM_SPAWNARMOR_GENERAL,
	ITEMLIST_WEAP_HMG_GENERAL,
	ITEMLIST_AMMO_HMG_GENERAL,
	ITEMLIST_AMMO_PACK_GENERAL,
	ITEMLIST_ITEM_KEY_SILVER_GENERAL,
	ITEMLIST_ITEM_KEY_GOLD_GENERAL,
	ITEMLIST_ITEM_KEY_MASTER_GENERAL,
	ITEMLIST_NUM_TOTAL_GENERAL
};
static const int qldm91ItemListToGeneral[] = { // based on wolfcamql
	ITEMLIST_NONE_GENERAL,
	ITEMLIST_ITEM_ARMOR_SHARD_GENERAL,
	ITEMLIST_ITEM_ARMOR_COMBAT_GENERAL,
	ITEMLIST_ITEM_ARMOR_BODY_GENERAL,
	ITEMLIST_ITEM_ARMOR_JACKET_GENERAL,
	ITEMLIST_ITEM_HEALTH_SMALL_GENERAL,
	ITEMLIST_ITEM_HEALTH_GENERAL,
	ITEMLIST_ITEM_HEALTH_LARGE_GENERAL,
	ITEMLIST_ITEM_HEALTH_MEGA_GENERAL,
	ITEMLIST_WEAPON_GAUNTLET_GENERAL,
	ITEMLIST_WEAPON_SHOTGUN_GENERAL,
	ITEMLIST_WEAPON_MACHINEGUN_GENERAL,
	ITEMLIST_WEAPON_GRENADELAUNCHER_GENERAL,
	ITEMLIST_WEAPON_ROCKETLAUNCHER_GENERAL,
	ITEMLIST_WEAPON_LIGHTNING_GENERAL,
	ITEMLIST_WEAPON_RAILGUN_GENERAL,
	ITEMLIST_WEAPON_PLASMAGUN_GENERAL,
	ITEMLIST_WEAPON_BFG_GENERAL,
	ITEMLIST_WEAPON_GRAPPLINGHOOK_GENERAL,
	ITEMLIST_AMMO_SHELLS_GENERAL,
	ITEMLIST_AMMO_BULLETS_GENERAL,
	ITEMLIST_AMMO_GRENADES_GENERAL,
	ITEMLIST_AMMO_CELLS_GENERAL,
	ITEMLIST_AMMO_LIGHTNING_GENERAL,
	ITEMLIST_AMMO_ROCKETS_GENERAL,
	ITEMLIST_AMMO_SLUGS_GENERAL,
	ITEMLIST_AMMO_BFG_GENERAL,
	ITEMLIST_HOLDABLE_TELEPORTER_GENERAL,
	ITEMLIST_HOLDABLE_MEDKIT_GENERAL,
	ITEMLIST_ITEM_QUAD_GENERAL,
	ITEMLIST_ITEM_ENVIRO_GENERAL,
	ITEMLIST_ITEM_HASTE_GENERAL,
	ITEMLIST_ITEM_INVIS_GENERAL,
	ITEMLIST_ITEM_REGEN_GENERAL,
	ITEMLIST_ITEM_FLIGHT_GENERAL,
	ITEMLIST_TEAM_CTF_REDFLAG_GENERAL,
	ITEMLIST_TEAM_CTF_BLUEFLAG_GENERAL,
	ITEMLIST_HOLDABLE_KAMIKAZE_GENERAL,
	ITEMLIST_HOLDABLE_PORTAL_GENERAL,
	ITEMLIST_HOLDABLE_INVULNERABILITY_GENERAL,
	ITEMLIST_AMMO_NAILS_GENERAL,
	ITEMLIST_AMMO_MINES_GENERAL,
	ITEMLIST_AMMO_BELT_GENERAL,
	ITEMLIST_ITEM_SCOUT_GENERAL,
	ITEMLIST_ITEM_GUARD_GENERAL,
	ITEMLIST_ITEM_DOUBLER_GENERAL,
	ITEMLIST_ITEM_ARMORREGEN_GENERAL,
	ITEMLIST_TEAM_CTF_NEUTRALFLAG_GENERAL,
	ITEMLIST_ITEM_REDCUBE_GENERAL,
	ITEMLIST_ITEM_BLUECUBE_GENERAL,
	ITEMLIST_WEAPON_NAILGUN_GENERAL,
	ITEMLIST_WEAPON_PROX_LAUNCHER_GENERAL,
	ITEMLIST_WEAPON_CHAINGUN_GENERAL,
	ITEMLIST_ITEM_SPAWNARMOR_GENERAL,
	ITEMLIST_WEAP_HMG_GENERAL,
	ITEMLIST_AMMO_HMG_GENERAL,
	ITEMLIST_AMMO_PACK_GENERAL,
	ITEMLIST_ITEM_KEY_SILVER_GENERAL,
	ITEMLIST_ITEM_KEY_GOLD_GENERAL,
	ITEMLIST_ITEM_KEY_MASTER_GENERAL,
	ITEMLIST_NUM_TOTAL_GENERAL
};


static const int q3AnimsToGeneral[]{
	BOTH_DEATH1_GENERAL,
	BOTH_DEAD1_GENERAL,
	BOTH_DEATH2_GENERAL,
	BOTH_DEAD2_GENERAL,
	BOTH_DEATH3_GENERAL,
	BOTH_DEAD3_GENERAL,

	TORSO_GESTURE_GENERAL,

	TORSO_ATTACK_GENERAL,
	TORSO_ATTACK2_GENERAL,

	TORSO_DROP_GENERAL,
	TORSO_RAISE_GENERAL,

	TORSO_STAND_GENERAL,
	TORSO_STAND2_GENERAL,

	LEGS_WALKCR_GENERAL,
	LEGS_WALK_GENERAL,
	LEGS_RUN_GENERAL,
	LEGS_BACK_GENERAL,
	LEGS_SWIM_GENERAL,

	LEGS_JUMP_GENERAL,
	LEGS_LAND_GENERAL,

	LEGS_JUMPB_GENERAL,
	LEGS_LANDB_GENERAL,

	LEGS_IDLE_GENERAL,
	LEGS_IDLECR_GENERAL,

	LEGS_TURN_GENERAL,

	TORSO_GETFLAG_GENERAL,
	TORSO_GUARDBASE_GENERAL,
	TORSO_PATROL_GENERAL,
	TORSO_FOLLOWME_GENERAL,
	TORSO_AFFIRMATIVE_GENERAL,
	TORSO_NEGATIVE_GENERAL,

	MAX_ANIMATIONS_GENERAL,

	LEGS_BACKCR_GENERAL,
	LEGS_BACKWALK_GENERAL,
	FLAG_RUN_GENERAL,
	FLAG_STAND_GENERAL,
	FLAG_STAND2RUN_GENERAL,

	MAX_TOTALANIMATIONS_GENERAL
};

static const int qlAnimsToGeneral[]{ // based on wolfcamql
	BOTH_DEATH1_GENERAL,
	BOTH_DEAD1_GENERAL,
	BOTH_DEATH2_GENERAL,
	BOTH_DEAD2_GENERAL,
	BOTH_DEATH3_GENERAL,
	BOTH_DEAD3_GENERAL,

	TORSO_GESTURE_GENERAL,

	TORSO_ATTACK_GENERAL,
	TORSO_ATTACK2_GENERAL,

	TORSO_DROP_GENERAL,
	TORSO_RAISE_GENERAL,

	TORSO_STAND_GENERAL,
	TORSO_STAND2_GENERAL,

	LEGS_WALKCR_GENERAL,
	LEGS_WALK_GENERAL,
	LEGS_RUN_GENERAL,
	LEGS_BACK_GENERAL,
	LEGS_SWIM_GENERAL,

	LEGS_JUMP_GENERAL,
	LEGS_LAND_GENERAL,

	LEGS_JUMPB_GENERAL,
	LEGS_LANDB_GENERAL,

	LEGS_IDLE_GENERAL,
	LEGS_IDLECR_GENERAL,

	LEGS_TURN_GENERAL,

	TORSO_GETFLAG_GENERAL,
	TORSO_GUARDBASE_GENERAL,
	TORSO_PATROL_GENERAL,
	TORSO_FOLLOWME_GENERAL,
	TORSO_AFFIRMATIVE_GENERAL,
	TORSO_NEGATIVE_GENERAL,

	MAX_ANIMATIONS_GENERAL,

	LEGS_BACKCR_GENERAL,
	LEGS_BACKWALK_GENERAL,
	FLAG_RUN_GENERAL,
	FLAG_STAND_GENERAL,
	FLAG_STAND2RUN_GENERAL,

	MAX_TOTALANIMATIONS_GENERAL
};


// TODO Idk what to do about the mission pack stuff...


static const int lsMoveNOSABERToGeneral[]{
	LS_NONE_GENERAL
};

static const int lsMoveQ3ToGeneral[]{
	LS_NONE_GENERAL
};

static int q3ModToGeneralMap[]{
	MOD_UNKNOWN_GENERAL,
	MOD_SHOTGUN_GENERAL,
	MOD_GAUNTLET_GENERAL,
	MOD_MACHINEGUN_GENERAL,
	MOD_GRENADELAUNCHER_GENERAL,//MOD_GRENADE_GENERAL, // because some games have actual normal grenades
	MOD_GRENADE_SPLASH_GENERAL,
	MOD_ROCKET_GENERAL,
	MOD_ROCKET_SPLASH_GENERAL,
	MOD_PLASMA_GENERAL,
	MOD_PLASMA_SPLASH_GENERAL,
	MOD_RAILGUN_GENERAL,
	MOD_LIGHTNING_GENERAL,
	MOD_BFG_GENERAL,
	MOD_BFG_SPLASH_GENERAL,
	MOD_WATER_GENERAL,
	MOD_SLIME_GENERAL,
	MOD_LAVA_GENERAL,
	MOD_CRUSH_GENERAL,
	MOD_TELEFRAG_GENERAL,
	MOD_FALLING_GENERAL,
	MOD_SUICIDE_GENERAL,
	MOD_TARGET_LASER_GENERAL,
	MOD_TRIGGER_HURT_GENERAL,
#ifdef MISSIONPACK
	MOD_NAIL_GENERAL,
	MOD_CHAINGUN_GENERAL,
	MOD_PROXIMITY_MINE_GENERAL,
	MOD_KAMIKAZE_GENERAL,
	MOD_JUICED_GENERAL,
#endif
	MOD_GRAPPLE_GENERAL
};

static int qlModToGeneralMap[]{ // based on wolfcamql
	MOD_UNKNOWN_GENERAL,
	MOD_SHOTGUN_GENERAL,
	MOD_GAUNTLET_GENERAL,
	MOD_MACHINEGUN_GENERAL,
	MOD_GRENADELAUNCHER_GENERAL,//MOD_GRENADE_GENERAL, // because some games have actual normal grenades
	MOD_GRENADE_SPLASH_GENERAL,
	MOD_ROCKET_GENERAL,
	MOD_ROCKET_SPLASH_GENERAL,
	MOD_PLASMA_GENERAL,
	MOD_PLASMA_SPLASH_GENERAL,
	MOD_RAILGUN_GENERAL,
	MOD_LIGHTNING_GENERAL,
	MOD_BFG_GENERAL,
	MOD_BFG_SPLASH_GENERAL,
	MOD_WATER_GENERAL,
	MOD_SLIME_GENERAL,
	MOD_LAVA_GENERAL,
	MOD_CRUSH_GENERAL,
	MOD_TELEFRAG_GENERAL,
	MOD_FALLING_GENERAL,
	MOD_SUICIDE_GENERAL,
	MOD_TARGET_LASER_GENERAL,
	MOD_TRIGGER_HURT_GENERAL,
#ifdef MISSIONPACK
	MOD_NAIL_GENERAL,
	MOD_CHAINGUN_GENERAL,
	MOD_PROXIMITY_MINE_GENERAL,
	MOD_KAMIKAZE_GENERAL,
	MOD_JUICED_GENERAL,
#endif
	MOD_GRAPPLE_GENERAL,
	MOD_SWITCH_TEAMS_GENERAL,  // 29
	MOD_THAW_GENERAL,
	MOD_LIGHTNING_DISCHARGE_GENERAL,  // demo?
	MOD_HMG_GENERAL,
	MOD_RAILGUN_HEADSHOT_GENERAL,
};

static int q3WeaponToJK2Map[]{
	WP_NONE_JK2,

	WP_STUN_BATON_JK2,//WP_GAUNTLET_JK2,
	WP_BLASTER_JK2,//WP_MACHINEGUN_JK2,
	WP_FLECHETTE_JK2,//WP_SHOTGUN_JK2,
	WP_DEMP2_JK2,//WP_GRENADE_LAUNCHER_JK2,
	WP_ROCKET_LAUNCHER_JK2,
	WP_REPEATER_JK2,//WP_LIGHTNING_JK2,
	WP_DISRUPTOR_JK2,//WP_RAILGUN_JK2,
	WP_REPEATER_JK2,//WP_PLASMAGUN_JK2,
	WP_BOWCASTER_JK2,//WP_BFG_JK2,
	WP_NONE_JK2,//WP_GRAPPLING_HOOK_JK2,
//#ifdef MISSIONPACK
	WP_NONE_JK2,//WP_NAILGUN_JK2,
	WP_NONE_JK2,//WP_PROX_LAUNCHER_JK2,
	WP_NONE_JK2,//WP_CHAINGUN_JK2,
//#endif

	WP_NUM_WEAPONS_JK2
};

static int qlWeaponToJK2Map[]{ // based on wolfcamql
	WP_NONE_JK2,

	WP_STUN_BATON_JK2,//WP_GAUNTLET_JK2,
	WP_BLASTER_JK2,//WP_MACHINEGUN_JK2,
	WP_FLECHETTE_JK2,//WP_SHOTGUN_JK2,
	WP_DEMP2_JK2,//WP_GRENADE_LAUNCHER_JK2,
	WP_ROCKET_LAUNCHER_JK2,
	WP_REPEATER_JK2,//WP_LIGHTNING_JK2,
	WP_DISRUPTOR_JK2,//WP_RAILGUN_JK2,
	WP_REPEATER_JK2,//WP_PLASMAGUN_JK2,
	WP_BOWCASTER_JK2,//WP_BFG_JK2,
	WP_NONE_JK2,//WP_GRAPPLING_HOOK_JK2,
//#ifdef MISSIONPACK
	WP_NONE_JK2,//WP_NAILGUN_JK2,
	WP_NONE_JK2,//WP_PROX_LAUNCHER_JK2,
	WP_NONE_JK2,//WP_CHAINGUN_JK2,
//#endif

	WP_BLASTER_JK2,//WP_HEAVY_MACHINEGUN_JK2,

	WP_NUM_WEAPONS_JK2
};
static int q3WeaponToGeneralMap[]{
	WP_NONE_GENERAL,

	WP_GAUNTLET_GENERAL,
	WP_MACHINEGUN_GENERAL,
	WP_SHOTGUN_GENERAL,
	WP_GRENADE_LAUNCHER_GENERAL,
	WP_ROCKET_LAUNCHER_GENERAL,
	WP_LIGHTNING_GENERAL,
	WP_RAILGUN_GENERAL,
	WP_PLASMAGUN_GENERAL,
	WP_BFG_GENERAL,
	WP_GRAPPLING_HOOK_GENERAL,
#ifdef MISSIONPACK
	WP_NAILGUN_GENERAL,
	WP_PROX_LAUNCHER_GENERAL,
	WP_CHAINGUN_GENERAL,
#endif

	WP_NUM_WEAPONS_GENERAL
};

static int qlWeaponToGeneralMap[]{ // based on wolfcamql
	WP_NONE_GENERAL,

	WP_GAUNTLET_GENERAL,
	WP_MACHINEGUN_GENERAL,
	WP_SHOTGUN_GENERAL,
	WP_GRENADE_LAUNCHER_GENERAL,
	WP_ROCKET_LAUNCHER_GENERAL,
	WP_LIGHTNING_GENERAL,
	WP_RAILGUN_GENERAL,
	WP_PLASMAGUN_GENERAL,
	WP_BFG_GENERAL,
	WP_GRAPPLING_HOOK_GENERAL,
#ifdef MISSIONPACK
	WP_NAILGUN_GENERAL,
	WP_PROX_LAUNCHER_GENERAL,
	WP_CHAINGUN_GENERAL,
#endif
	WP_HEAVY_MACHINEGUN_GENERAL,

	WP_NUM_WEAPONS_GENERAL
};

const static int q3dm68EventToGeneralMap[] = {
	EV_NONE_GENERAL,

	EV_FOOTSTEP_GENERAL,
	EV_FOOTSTEP_METAL_GENERAL,
	EV_FOOTSPLASH_GENERAL,
	EV_FOOTWADE_GENERAL,
	EV_SWIM_GENERAL,

	EV_STEP_4_GENERAL,
	EV_STEP_8_GENERAL,
	EV_STEP_12_GENERAL,
	EV_STEP_16_GENERAL,

	EV_FALL_SHORT_GENERAL,
	EV_FALL_MEDIUM_GENERAL,
	EV_FALL_FAR_GENERAL,

	EV_JUMP_PAD_GENERAL,			// boing sound at origin_GENERAL, jump sound on player

	EV_JUMP_GENERAL,
	EV_WATER_TOUCH_GENERAL,	// foot touches
	EV_WATER_LEAVE_GENERAL,	// foot leaves
	EV_WATER_UNDER_GENERAL,	// head touches
	EV_WATER_CLEAR_GENERAL,	// head leaves

	EV_ITEM_PICKUP_GENERAL,			// normal item pickups are predictable
	EV_GLOBAL_ITEM_PICKUP_GENERAL,	// powerup / team sounds are broadcast to everyone

	EV_NOAMMO_GENERAL,
	EV_CHANGE_WEAPON_GENERAL,
	EV_FIRE_WEAPON_GENERAL,

	EV_USE_ITEM0_GENERAL,
	EV_USE_ITEM1_GENERAL,
	EV_USE_ITEM2_GENERAL,
	EV_USE_ITEM3_GENERAL,
	EV_USE_ITEM4_GENERAL,
	EV_USE_ITEM5_GENERAL,
	EV_USE_ITEM6_GENERAL,
	EV_USE_ITEM7_GENERAL,
	EV_USE_ITEM8_GENERAL,
	EV_USE_ITEM9_GENERAL,
	EV_USE_ITEM10_GENERAL,
	EV_USE_ITEM11_GENERAL,
	EV_USE_ITEM12_GENERAL,
	EV_USE_ITEM13_GENERAL,
	EV_USE_ITEM14_GENERAL,
	EV_USE_ITEM15_GENERAL,

	EV_ITEM_RESPAWN_GENERAL,
	EV_ITEM_POP_GENERAL,
	EV_PLAYER_TELEPORT_IN_GENERAL,
	EV_PLAYER_TELEPORT_OUT_GENERAL,

	EV_GRENADE_BOUNCE_GENERAL,		// eventParm will be the soundindex

	EV_GENERAL_SOUND_GENERAL,
	EV_GLOBAL_SOUND_GENERAL,		// no attenuation
	EV_GLOBAL_TEAM_SOUND_GENERAL,

	EV_BULLET_HIT_FLESH_GENERAL,
	EV_BULLET_HIT_WALL_GENERAL,

	EV_MISSILE_HIT_GENERAL,
	EV_MISSILE_MISS_GENERAL,
	EV_MISSILE_MISS_METAL_GENERAL,
	EV_RAILTRAIL_GENERAL,
	EV_SHOTGUN_GENERAL,
	EV_BULLET_GENERAL,				// otherEntity is the shooter

	EV_PAIN_GENERAL,
	EV_DEATH1_GENERAL,
	EV_DEATH2_GENERAL,
	EV_DEATH3_GENERAL,
	EV_OBITUARY_GENERAL,

	EV_POWERUP_QUAD_GENERAL,
	EV_POWERUP_BATTLESUIT_GENERAL,
	EV_POWERUP_REGEN_GENERAL,

	EV_GIB_PLAYER_GENERAL,			// gib a previously living player
	EV_SCOREPLUM_GENERAL,			// score plum

//#ifdef MISSIONPACK
	EV_PROXIMITY_MINE_STICK_GENERAL,
	EV_PROXIMITY_MINE_TRIGGER_GENERAL,
	EV_KAMIKAZE_GENERAL,			// kamikaze explodes
	EV_OBELISKEXPLODE_GENERAL,		// obelisk explodes
	EV_OBELISKPAIN_GENERAL,			// obelisk is in pain
	EV_INVUL_IMPACT_GENERAL,		// invulnerability sphere impact
	EV_JUICED_GENERAL,				// invulnerability juiced effect
	EV_LIGHTNINGBOLT_GENERAL,		// lightning bolt bounced of invulnerability sphere
//#endif

	EV_DEBUG_LINE_GENERAL,
	EV_STOPLOOPINGSOUND_GENERAL,
	EV_TAUNT_GENERAL,
	EV_TAUNT_YES_GENERAL,
	EV_TAUNT_NO_GENERAL,
	EV_TAUNT_FOLLOWME_GENERAL,
	EV_TAUNT_GETFLAG_GENERAL,
	EV_TAUNT_GUARDBASE_GENERAL,
	EV_TAUNT_PATROL_GENERAL,
};

const static int qlEventToGeneralMap[] = { // based on wolfcamql, a bunch of it seems to be guesswork.

	EV_NONE_GENERAL,

	EV_FOOTSTEP_GENERAL,// = 1,
	EV_FOOTSTEP_METAL_GENERAL,// = 2,
	EV_FOOTSPLASH_GENERAL,// = 3,
	EV_FOOTWADE_GENERAL,  // guess
	EV_SWIM_GENERAL,    // guess

	EV_FALL_SHORT_GENERAL,// = 6,
	EV_FALL_MEDIUM_GENERAL,// = 7,
	EV_FALL_FAR_GENERAL,// = 8,
	EV_JUMP_PAD_GENERAL,// = 9,
	EV_JUMP_GENERAL,// = 10,
	EV_WATER_TOUCH_GENERAL,// = 11,
	EV_WATER_LEAVE_GENERAL,// = 12,

	EV_WATER_UNDER_GENERAL,// = 13,
	EV_WATER_CLEAR_GENERAL,// = 14,

	EV_ITEM_PICKUP_GENERAL,// = 15,
	EV_GLOBAL_ITEM_PICKUP_GENERAL,// = 16,

	EV_NOAMMO_GENERAL,// = 17,
	EV_CHANGE_WEAPON_GENERAL,// = 18,
	EV_DROP_WEAPON_GENERAL,// = 19,
	EV_FIRE_WEAPON_GENERAL,// = 20,

	EV_USE_ITEM0_GENERAL,  // guess
	EV_USE_ITEM1_GENERAL,// = 22,
	EV_USE_ITEM2_GENERAL,  // guess
	EV_USE_ITEM3_GENERAL,  // guess
	EV_USE_ITEM4_GENERAL,  // guess
	EV_USE_ITEM5_GENERAL,  // guess
	EV_USE_ITEM6_GENERAL,  // guess
	EV_USE_ITEM7_GENERAL,  // guess
	EV_USE_ITEM8_GENERAL,  // guess
	EV_USE_ITEM9_GENERAL,  // guess
	EV_USE_ITEM10_GENERAL,  // guess
	EV_USE_ITEM11_GENERAL,  // guess
	EV_USE_ITEM12_GENERAL,  // guess
	EV_USE_ITEM13_GENERAL,  // guess
	EV_USE_ITEM14_GENERAL,  // guess
	EV_USE_ITEM15_GENERAL,  // guess


	EV_ITEM_RESPAWN_GENERAL,// = 37,
	EV_ITEM_POP_GENERAL,  // guess

	EV_PLAYER_TELEPORT_IN_GENERAL,// = 39,
	EV_PLAYER_TELEPORT_OUT_GENERAL,// = 40,
	EV_GRENADE_BOUNCE_GENERAL,// = 41,
	EV_GENERAL_SOUND_GENERAL,// = 42,
	EV_GLOBAL_SOUND_GENERAL,// = 43,

	EV_GLOBAL_TEAM_SOUND_GENERAL,  // guess

	EV_BULLET_HIT_FLESH_GENERAL,// = 45,
	EV_BULLET_HIT_WALL_GENERAL,// = 46,
	EV_MISSILE_HIT_GENERAL,// = 47,
	EV_MISSILE_MISS_GENERAL,// = 48,

	EV_MISSILE_MISS_METAL_GENERAL,// = 49,
	EV_RAILTRAIL_GENERAL,// = 50,

	EV_SHOTGUN_GENERAL,// = 51,

	// not in quakelive    EV_BULLET_GENERAL,
	EV_NONE_GENERAL, // (unknown?)

	EV_PAIN_GENERAL,// = 53,
	EV_DEATH1_GENERAL,// = 54,
	EV_DEATH2_GENERAL,// = 55,
	EV_DEATH3_GENERAL,// = 56,
	EV_DROWN_GENERAL,// = 57,

	EV_OBITUARY_GENERAL,// = 58,

	EV_POWERUP_QUAD_GENERAL,  // guess
	EV_POWERUP_BATTLESUIT_GENERAL,// = 60,
	EV_POWERUP_REGEN_GENERAL,// = 61,  // 62 in older demo zero4 vs cl0ck
	EV_POWERUP_ARMOR_REGEN_GENERAL,// = 62,  // ctf silentnight (2010-12-26)  armor regen?
	EV_GIB_PLAYER_GENERAL,// = 63,
	EV_SCOREPLUM_GENERAL,// = 64,

	EV_PROXIMITY_MINE_STICK_GENERAL,// = 65,
	EV_PROXIMITY_MINE_TRIGGER_GENERAL,// = 66,

	EV_KAMIKAZE_GENERAL,// = 67,			// kamikaze explodes
	EV_OBELISKEXPLODE_GENERAL,// = 68,
	EV_OBELISKPAIN_GENERAL,// = 69,
	EV_INVUL_IMPACT_GENERAL,// = 70,		// invulnerability sphere impact

	EV_NONE_GENERAL, // (unknown?)

	EV_DEBUG_LINE_GENERAL,// = 72,  // guess
	EV_STOPLOOPINGSOUND_GENERAL,// = 73, // guess
	EV_TAUNT_GENERAL,// = 74,
	EV_TAUNT_YES_GENERAL,  // guess
	EV_TAUNT_NO_GENERAL,  // guess
	EV_TAUNT_FOLLOWME_GENERAL,  // guess
	EV_TAUNT_GETFLAG_GENERAL,  // guess
	EV_TAUNT_GUARDBASE_GENERAL,  // guess
	EV_TAUNT_PATROL_GENERAL,  // guess

	EV_FOOTSTEP_SNOW_GENERAL,// = 81,
	EV_FOOTSTEP_WOOD_GENERAL,// = 82,
	EV_ITEM_PICKUP_SPEC_GENERAL,// = 83,
	EV_OVERTIME_GENERAL,// = 84,
	EV_GAMEOVER_GENERAL,// = 85,

	EV_NONE_GENERAL, // (unknown?)

	EV_THAW_PLAYER_GENERAL,// = 87,
	EV_THAW_TICK_GENERAL,// = 88,
	EV_HEADSHOT_GENERAL,// = 89,
	EV_POI_GENERAL,// = 90,

	EV_NONE_GENERAL, // (unknown?)
	EV_NONE_GENERAL, // (unknown?)

	EV_RACE_START_GENERAL, // = 93,
	EV_RACE_CHECKPOINT_GENERAL, // = 94,
	EV_RACE_END_GENERAL, // = 95,

	EV_DAMAGEPLUM_GENERAL, // = 96,
	EV_AWARD_GENERAL, // = 97,
	EV_INFECTED_GENERAL, // = 98,
	EV_NEW_HIGH_SCORE_GENERAL, // = 99,

	EV_NONE_GENERAL, // 100
	EV_NONE_GENERAL, // 101
	EV_NONE_GENERAL, // 102
	EV_NONE_GENERAL, // 103
	EV_NONE_GENERAL, // 104
	EV_NONE_GENERAL, // 105
	EV_NONE_GENERAL, // 106
	EV_NONE_GENERAL, // 107
	EV_NONE_GENERAL, // 108
	EV_NONE_GENERAL, // 109
	EV_NONE_GENERAL, // 110
	EV_NONE_GENERAL, // 111
	EV_NONE_GENERAL, // 112
	EV_NONE_GENERAL, // 113
	EV_NONE_GENERAL, // 114
	EV_NONE_GENERAL, // 115
	EV_NONE_GENERAL, // 116
	EV_NONE_GENERAL, // 117
	EV_NONE_GENERAL, // 118
	EV_NONE_GENERAL, // 119
	EV_NONE_GENERAL, // 120
	EV_NONE_GENERAL, // 121
	EV_NONE_GENERAL, // 122
	EV_NONE_GENERAL, // 123
	EV_NONE_GENERAL, // 124
	EV_NONE_GENERAL, // 125
	EV_NONE_GENERAL, // 126
	EV_NONE_GENERAL, // 127
	EV_NONE_GENERAL, // 128
	EV_NONE_GENERAL, // 129
	EV_NONE_GENERAL, // 130
	EV_NONE_GENERAL, // 131
	EV_NONE_GENERAL, // 132
	EV_NONE_GENERAL, // 133
	EV_NONE_GENERAL, // 134
	EV_NONE_GENERAL, // 135
	EV_NONE_GENERAL, // 136
	EV_NONE_GENERAL, // 137
	EV_NONE_GENERAL, // 138
	EV_NONE_GENERAL, // 139
	EV_NONE_GENERAL, // 140
	EV_NONE_GENERAL, // 141
	EV_NONE_GENERAL, // 142
	EV_NONE_GENERAL, // 143
	EV_NONE_GENERAL, // 144
	EV_NONE_GENERAL, // 145
	EV_NONE_GENERAL, // 146
	EV_NONE_GENERAL, // 147
	EV_NONE_GENERAL, // 148
	EV_NONE_GENERAL, // 149
	EV_NONE_GENERAL, // 150
	EV_NONE_GENERAL, // 151
	EV_NONE_GENERAL, // 152
	EV_NONE_GENERAL, // 153
	EV_NONE_GENERAL, // 154
	EV_NONE_GENERAL, // 155
	EV_NONE_GENERAL, // 156
	EV_NONE_GENERAL, // 157
	EV_NONE_GENERAL, // 158
	EV_NONE_GENERAL, // 159
	EV_NONE_GENERAL, // 160
	EV_NONE_GENERAL, // 161
	EV_NONE_GENERAL, // 162
	EV_NONE_GENERAL, // 163
	EV_NONE_GENERAL, // 164
	EV_NONE_GENERAL, // 165
	EV_NONE_GENERAL, // 166
	EV_NONE_GENERAL, // 167
	EV_NONE_GENERAL, // 168
	EV_NONE_GENERAL, // 169
	EV_NONE_GENERAL, // 170
	EV_NONE_GENERAL, // 171
	EV_NONE_GENERAL, // 172
	EV_NONE_GENERAL, // 173
	EV_NONE_GENERAL, // 174
	EV_NONE_GENERAL, // 175
	EV_NONE_GENERAL, // 176
	EV_NONE_GENERAL, // 177
	EV_NONE_GENERAL, // 178
	EV_NONE_GENERAL, // 179
	EV_NONE_GENERAL, // 180
	EV_NONE_GENERAL, // 181
	EV_NONE_GENERAL, // 182
	EV_NONE_GENERAL, // 183
	EV_NONE_GENERAL, // 184
	EV_NONE_GENERAL, // 185
	EV_NONE_GENERAL, // 186
	EV_NONE_GENERAL, // 187
	EV_NONE_GENERAL, // 188
	EV_NONE_GENERAL, // 189
	EV_NONE_GENERAL, // 190
	EV_NONE_GENERAL, // 191
	EV_NONE_GENERAL, // 192
	EV_NONE_GENERAL, // 193
	EV_NONE_GENERAL, // 194
	EV_NONE_GENERAL, // 195

	// just to allow compiling  -- no it's used with predicted player state
	EV_STEP_4_GENERAL, // = 196,
	EV_STEP_8_GENERAL,
	EV_STEP_12_GENERAL,
	EV_STEP_16_GENERAL,
	EV_STEP_20_GENERAL,
	EV_STEP_24_GENERAL,

	//FIXME these are definately wrong -- just getting it to compile



	EV_JUICED_GENERAL,				// invulnerability juiced effect
	EV_LIGHTNINGBOLT_GENERAL,		// lightning bolt bounced of invulnerability sphere
};

static const int q3dm68EventToJk2Map[] = {
	EV_NONE_JK2,

	EV_FOOTSTEP_JK2,
	EV_FOOTSTEP_METAL_JK2,
	EV_FOOTSPLASH_JK2,
	EV_FOOTWADE_JK2,
	EV_SWIM_JK2,

	EV_STEP_4_JK2,
	EV_STEP_8_JK2,
	EV_STEP_12_JK2,
	EV_STEP_16_JK2,

	EV_FALL_JK2,// EV_FALL_SHORT_JK2,
	EV_FALL_JK2,//EV_FALL_MEDIUM_JK2,
	EV_FALL_JK2,//EV_FALL_FAR_JK2,

	EV_JUMP_PAD_JK2,			// boing sound at origin_JK2, jump sound on player

	EV_JUMP_JK2,
	EV_WATER_TOUCH_JK2,	// foot touches
	EV_WATER_LEAVE_JK2,	// foot leaves
	EV_WATER_UNDER_JK2,	// head touches
	EV_WATER_CLEAR_JK2,	// head leaves

	EV_ITEM_PICKUP_JK2,			// normal item pickups are predictable
	EV_GLOBAL_ITEM_PICKUP_JK2,	// powerup / team sounds are broadcast to everyone

	EV_NOAMMO_JK2,
	EV_CHANGE_WEAPON_JK2,
	EV_FIRE_WEAPON_JK2,

	EV_USE_ITEM0_JK2,
	EV_USE_ITEM1_JK2,
	EV_USE_ITEM2_JK2,
	EV_USE_ITEM3_JK2,
	EV_USE_ITEM4_JK2,
	EV_USE_ITEM5_JK2,
	EV_USE_ITEM6_JK2,
	EV_USE_ITEM7_JK2,
	EV_USE_ITEM8_JK2,
	EV_USE_ITEM9_JK2,
	EV_USE_ITEM10_JK2,
	EV_USE_ITEM11_JK2,
	EV_USE_ITEM12_JK2,
	EV_USE_ITEM13_JK2,
	EV_USE_ITEM14_JK2,
	EV_USE_ITEM15_JK2,

	EV_ITEM_RESPAWN_JK2,
	EV_ITEM_POP_JK2,
	EV_PLAYER_TELEPORT_IN_JK2,
	EV_PLAYER_TELEPORT_OUT_JK2,

	EV_GRENADE_BOUNCE_JK2,		// eventParm will be the soundindex

	EV_GENERAL_SOUND_JK2,
	EV_GLOBAL_SOUND_JK2,		// no attenuation
	EV_GLOBAL_TEAM_SOUND_JK2,

	EV_NONE_JK2,//EV_BULLET_HIT_FLESH_JK2,
	EV_NONE_JK2,//EV_BULLET_HIT_WALL_JK2,

	EV_MISSILE_HIT_JK2,
	EV_MISSILE_MISS_JK2,
	EV_MISSILE_MISS_METAL_JK2,
	EV_NONE_JK2,//EV_RAILTRAIL_JK2,
	EV_NONE_JK2,//EV_SHOTGUN_JK2,
	EV_BULLET_JK2,				// otherEntity is the shooter

	EV_PAIN_JK2,
	EV_DEATH1_JK2,
	EV_DEATH2_JK2,
	EV_DEATH3_JK2,
	EV_OBITUARY_JK2,

	EV_POWERUP_QUAD_JK2,
	EV_POWERUP_BATTLESUIT_JK2,
	EV_NONE_JK2,//EV_POWERUP_REGEN_JK2,

	EV_GIB_PLAYER_JK2,			// gib a previously living player
	EV_SCOREPLUM_JK2,			// score plum

//#ifdef MISSIONPACK
	EV_NONE_JK2,//EV_PROXIMITY_MINE_STICK_JK2,
	EV_NONE_JK2,//EV_PROXIMITY_MINE_TRIGGER_JK2,
	EV_NONE_JK2,//EV_KAMIKAZE_JK2,			// kamikaze explodes
	EV_NONE_JK2,//EV_OBELISKEXPLODE_JK2,		// obelisk explodes
	EV_NONE_JK2,//EV_OBELISKPAIN_JK2,			// obelisk is in pain
	EV_NONE_JK2,//EV_INVUL_IMPACT_JK2,		// invulnerability sphere impact
	EV_NONE_JK2,//EV_JUICED_JK2,				// invulnerability juiced effect
	EV_NONE_JK2,//EV_LIGHTNINGBOLT_JK2,		// lightning bolt bounced of invulnerability sphere
//#endif

	EV_DEBUG_LINE_JK2,
	EV_STOPLOOPINGSOUND_JK2,
	EV_TAUNT_JK2,
	EV_TAUNT_YES_JK2,
	EV_TAUNT_NO_JK2,
	EV_TAUNT_FOLLOWME_JK2,
	EV_TAUNT_GETFLAG_JK2,
	EV_TAUNT_GUARDBASE_JK2,
	EV_TAUNT_PATROL_JK2

};


#define MapQ3DM68EventJK2(ev) (q3dm68EventToJk2Map[(ev)&~EV_EVENT_BITS] | ((ev)&EV_EVENT_BITS))


static const int q3EntityTypeToGeneral [] {
	ET_GENERAL_GENERAL,
	ET_PLAYER_GENERAL,
	ET_ITEM_GENERAL,
	ET_MISSILE_GENERAL,
	ET_MOVER_GENERAL,
	ET_BEAM_GENERAL,
	ET_PORTAL_GENERAL,
	ET_SPEAKER_GENERAL,
	ET_PUSH_TRIGGER_GENERAL,
	ET_TELEPORT_TRIGGER_GENERAL,
	ET_INVISIBLE_GENERAL,
	ET_GRAPPLE_GENERAL,				// grapple hooked on wall
	ET_TEAM_GENERAL,

	ET_EVENTS_GENERAL
							// by setting eType to ET_EVENTS + eventNum
							// this avoids having to set eFlags and eventNum
};

static const int q3GameTypeToGeneral [] {
	GT_FFA_GENERAL,				// free for all
	GT_TOURNAMENT_GENERAL,		// one on one tournament
	GT_SINGLE_PLAYER_GENERAL,	// single player ffa

	//-- team games go after this --

	GT_TEAM_GENERAL,			// team deathmatch
	GT_CTF_GENERAL,				// capture the flag
	GT_1FCTF_GENERAL,
	GT_OBELISK_GENERAL,
	GT_HARVESTER_GENERAL,
	GT_MAX_GAME_TYPE_GENERAL
};

static const int qlEntityTypeToGeneral [] { // based on wolfcamql
	ET_GENERAL_GENERAL,
	ET_PLAYER_GENERAL,
	ET_ITEM_GENERAL,
	ET_MISSILE_GENERAL,
	ET_MOVER_GENERAL,
	ET_BEAM_GENERAL,
	ET_PORTAL_GENERAL,
	ET_SPEAKER_GENERAL,
	ET_PUSH_TRIGGER_GENERAL,
	ET_TELEPORT_TRIGGER_GENERAL,
	ET_INVISIBLE_GENERAL,
	ET_GRAPPLE_GENERAL,				// grapple hooked on wall
	ET_TEAM_GENERAL,

	ET_EVENTS_GENERAL				// any of the EV_* events can be added freestanding
							// by setting eType to ET_EVENTS + eventNum
							// this avoids having to set eFlags and eventNum
};


static const int qlGametypeToGeneral [] { // based on wolfcamql

	GT_FFA_GENERAL,				// free for all
	GT_TOURNAMENT_GENERAL,		// one on one tournament
	GT_RACE_GENERAL, // ql
	GT_TEAM_GENERAL,
	GT_CA_GENERAL, // ql idk
	GT_CTF_GENERAL,				// capture the flag
	GT_1FCTF_GENERAL,//q3
	GT_OBELISK_GENERAL,//q3
	GT_HARVESTER_GENERAL, //q3
	GT_FT_GENERAL, // ql freezetag
	GT_DOMINATION_GENERAL, // ql
	GT_CTFS_GENERAL, // ql attack and defend
	GT_REDROVER_GENERAL, // ql
	GT_MAX_GAME_TYPE_GENERAL
};



typedef enum {
	ET_GENERAL_Q3,
	ET_PLAYER_Q3,
	ET_ITEM_Q3,
	ET_MISSILE_Q3,
	ET_MOVER_Q3,
	ET_BEAM_Q3,
	ET_PORTAL_Q3,
	ET_SPEAKER_Q3,
	ET_PUSH_TRIGGER_Q3,
	ET_TELEPORT_TRIGGER_Q3,
	ET_INVISIBLE_Q3,
	ET_GRAPPLE_Q3,				// grapple hooked on wall
	ET_TEAM_Q3,

	ET_EVENTS_Q3
							// by setting eType to ET_EVENTS + eventNum
							// this avoids having to set eFlags and eventNum
} entityTypeQ3DM68_t;

typedef enum { // based on wolfcamql
	ET_GENERAL_QL,
	ET_PLAYER_QL,
	ET_ITEM_QL,
	ET_MISSILE_QL,
	ET_MOVER_QL,
	ET_BEAM_QL,
	ET_PORTAL_QL,
	ET_SPEAKER_QL,
	ET_PUSH_TRIGGER_QL,
	ET_TELEPORT_TRIGGER_QL,
	ET_INVISIBLE_QL,
	ET_GRAPPLE_QL,				// grapple hooked on wall
	ET_TEAM_QL,

	ET_EVENTS_QL				// any of the EV_* events can be added freestanding
							// by setting eType to ET_EVENTS + eventNum
							// this avoids having to set eFlags and eventNum
} entityTypeQL_t;


// animations
static const int q3AnimToDM16[] = //# animNumber_e
{
	BOTH_DEATH1_DM16,
	BOTH_DEAD1_DM16,
	BOTH_DEATH2_DM16,
	BOTH_DEAD2_DM16,
	BOTH_DEATH3_DM16,
	BOTH_DEAD3_DM16,

	BOTH_ENGAGETAUNT_DM16, //TORSO_GESTURE_DM16,

	BOTH_ATTACK1_DM16,//TORSO_ATTACK_DM16,
	BOTH_ATTACK2_DM16,//TORSO_ATTACK2_DM16,

	TORSO_DROPWEAP1_DM16,//TORSO_DROP_DM16,
	TORSO_RAISEWEAP1_DM16,//TORSO_RAISE_DM16,

	BOTH_STAND3_DM16,//TORSO_STAND_DM16,
	BOTH_STAND3_DM16,//TORSO_STAND2_DM16,

	BOTH_CROUCH1WALK_DM16,//LEGS_WALKCR_DM16,
	BOTH_WALK1_DM16,//LEGS_WALK_DM16,
	BOTH_RUN1_DM16,//LEGS_RUN_DM16,
	BOTH_RUNBACK1_DM16,//LEGS_BACK_DM16,
	BOTH_SWIMFORWARD_DM16,//LEGS_SWIM_DM16,

	BOTH_JUMP1_DM16,//LEGS_JUMP_DM16,
	BOTH_LAND1_DM16,//LEGS_LAND_DM16,

	BOTH_JUMPBACK1_DM16,//LEGS_JUMPB_DM16,
	BOTH_LANDBACK1_DM16,//LEGS_LANDB_DM16,

	BOTH_STAND1_DM16,//LEGS_IDLE_DM16,
	BOTH_CROUCH1IDLE_DM16,//LEGS_IDLECR_DM16,

	LEGS_TURN1_DM16,//LEGS_TURN_DM16,

	0,//TORSO_GETFLAG_DM16,
	0,//TORSO_GUARDBASE_DM16,
	0,//TORSO_PATROL_DM16,
	0,//TORSO_FOLLOWME_DM16,
	0,//TORSO_AFFIRMATIVE_DM16,
	0,//TORSO_NEGATIVE_DM16,

	MAX_ANIMATIONS_DM16,

	BOTH_CROUCH1WALKBACK_DM16,//LEGS_BACKCR_DM16,
	BOTH_WALKBACK1_DM16,//LEGS_BACKWALK_DM16,
	0,//FLAG_RUN_DM16,
	0,//FLAG_STAND_DM16,
	0,//FLAG_STAND2RUN_DM16,

	MAX_TOTALANIMATIONS_DM16
};

static const int qlAnimToDM16[] = //# animNumber_e  // based on wolfcamql
{
	BOTH_DEATH1_DM16,
	BOTH_DEAD1_DM16,
	BOTH_DEATH2_DM16,
	BOTH_DEAD2_DM16,
	BOTH_DEATH3_DM16,
	BOTH_DEAD3_DM16,

	BOTH_ENGAGETAUNT_DM16, //TORSO_GESTURE_DM16,

	BOTH_ATTACK1_DM16,//TORSO_ATTACK_DM16,
	BOTH_ATTACK2_DM16,//TORSO_ATTACK2_DM16,

	TORSO_DROPWEAP1_DM16,//TORSO_DROP_DM16,
	TORSO_RAISEWEAP1_DM16,//TORSO_RAISE_DM16,

	BOTH_STAND3_DM16,//TORSO_STAND_DM16,
	BOTH_STAND3_DM16,//TORSO_STAND2_DM16,

	BOTH_CROUCH1WALK_DM16,//LEGS_WALKCR_DM16,
	BOTH_WALK1_DM16,//LEGS_WALK_DM16,
	BOTH_RUN1_DM16,//LEGS_RUN_DM16,
	BOTH_RUNBACK1_DM16,//LEGS_BACK_DM16,
	BOTH_SWIMFORWARD_DM16,//LEGS_SWIM_DM16,

	BOTH_JUMP1_DM16,//LEGS_JUMP_DM16,
	BOTH_LAND1_DM16,//LEGS_LAND_DM16,

	BOTH_JUMPBACK1_DM16,//LEGS_JUMPB_DM16,
	BOTH_LANDBACK1_DM16,//LEGS_LANDB_DM16,

	BOTH_STAND1_DM16,//LEGS_IDLE_DM16,
	BOTH_CROUCH1IDLE_DM16,//LEGS_IDLECR_DM16,

	LEGS_TURN1_DM16,//LEGS_TURN_DM16,

	0,//TORSO_GETFLAG_DM16,
	0,//TORSO_GUARDBASE_DM16,
	0,//TORSO_PATROL_DM16,
	0,//TORSO_FOLLOWME_DM16,
	0,//TORSO_AFFIRMATIVE_DM16,
	0,//TORSO_NEGATIVE_DM16,

	MAX_ANIMATIONS_DM16,

	BOTH_CROUCH1WALKBACK_DM16,//LEGS_BACKCR_DM16,
	BOTH_WALKBACK1_DM16,//LEGS_BACKWALK_DM16,
	0,//FLAG_RUN_DM16,
	0,//FLAG_STAND_DM16,
	0,//FLAG_STAND2RUN_DM16,

	MAX_TOTALANIMATIONS_DM16
};


//#define MapQ3AnimToJK2(anim) (q3AnimMapping[(anim)&~ANIM_TOGGLEBIT_Q3] | (((anim)&ANIM_TOGGLEBIT_Q3)*ANIM_TOGGLEBIT/ANIM_TOGGLEBIT_Q3))


#endif